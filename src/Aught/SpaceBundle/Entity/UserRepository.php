<?php

namespace Aught\SpaceBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public static function getAuthorFromSocketMessage($msg, $space, $space_rep, $user_rep)
    {
        if (!isset($msg['u'])) {
            throw new \Exception("Invalid message contents - missing 'u'!", 1);
        }

        // Find the user corresponding to the author's id
        $author = $user_rep->findById($msg['u']);
        if (!$author) throw new \Exception("No such author!", 1);
        $author = reset($author);

        // Verify that the author is a participant in the given space
        $participants = $space_rep->findParticipantsBySpaceId($space->getId());
        $is_member = false;
        foreach ($participants as $p) {
            if ($p->getId() === $author->getId()) {
                $is_member = true;
                break;
            }
        }
        if (!$is_member) throw new \Exception("User in socket message doesn't belong to space {$space->getToken()}!", 1);

        return $author;
    }

    public function upsertUserInSpace($name, $email, $relation, $space, $em)
    {
        // Check for user with same email
        $existing_user = $this->findByEmail($email);

        if ($existing_user) {
            $user = reset($existing_user);
            if ($user->getName() !== $name) {
                $user->setName($name);
                $em->merge($user);
            }
        } else {
            $user = new User();
            $user->setName($name);
            $user->setEmail($email);
            $em->persist($user);
        }

        // Create link for user
        $space_link = new SpaceLink();
        $space_link->setUser($user);
        $space_link->setSpace($space);
        $space_link->setRelation($relation);
        $em->persist($space_link);

        return $user;
    }
}
